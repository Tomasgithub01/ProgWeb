// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createGame = `-- name: CreateGame :one
INSERT INTO game (name, description, image, state, rating) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, image, state, rating
`

type CreateGameParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Image       sql.NullString `json:"image"`
	State       interface{}    `json:"state"`
	Rating      interface{}    `json:"rating"`
}

type CreateGameRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Image       sql.NullString `json:"image"`
	State       interface{}    `json:"state"`
	Rating      interface{}    `json:"rating"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (CreateGameRow, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.State,
		arg.Rating,
	)
	var i CreateGameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.State,
		&i.Rating,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM game
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, name, description, image, state, rating, link 
FROM game
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id int32) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.State,
		&i.Rating,
		&i.Link,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, name, description, image, state, rating, link
FROM game
ORDER BY name
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.State,
			&i.Rating,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :exec
UPDATE game 
SET name = $2, description = $3, image = $4, state = $5, rating = $6
WHERE id = $1
`

type UpdateGameParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Image       sql.NullString `json:"image"`
	State       interface{}    `json:"state"`
	Rating      interface{}    `json:"rating"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.ExecContext(ctx, updateGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.State,
		arg.Rating,
	)
	return err
}
