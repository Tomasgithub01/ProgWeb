// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
)

const averageGameRating = `-- name: AverageGameRating :one
SELECT avg(COALESCE(rating, 0))
FROM plays
WHERE id_game = $1
`

func (q *Queries) AverageGameRating(ctx context.Context, idGame int32) (float64, error) {
	row := q.db.QueryRowContext(ctx, averageGameRating, idGame)
	var avg float64
	err := row.Scan(&avg)
	return avg, err
}

const createGame = `-- name: CreateGame :one
INSERT INTO game (name, description, image, link) 
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, image, link
`

type CreateGameParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Image       string `json:"image"`
	Link        string `json:"link"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Link,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Link,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password)
VALUES ($1, $2)
RETURNING id, name, password
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const createUserPlaysGame = `-- name: CreateUserPlaysGame :one
INSERT INTO plays (id_game, id_user, state, rating)
VALUES ($1, $2, $3, $4)
RETURNING id_game, id_user, state, rating
`

type CreateUserPlaysGameParams struct {
	IDGame int32       `json:"id_game"`
	IDUser int32       `json:"id_user"`
	State  interface{} `json:"state"`
	Rating interface{} `json:"rating"`
}

func (q *Queries) CreateUserPlaysGame(ctx context.Context, arg CreateUserPlaysGameParams) (Play, error) {
	row := q.db.QueryRowContext(ctx, createUserPlaysGame,
		arg.IDGame,
		arg.IDUser,
		arg.State,
		arg.Rating,
	)
	var i Play
	err := row.Scan(
		&i.IDGame,
		&i.IDUser,
		&i.State,
		&i.Rating,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM game
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserPlaysGame = `-- name: DeleteUserPlaysGame :exec
DELETE FROM plays
WHERE id_game = $1 AND id_user = $2
`

type DeleteUserPlaysGameParams struct {
	IDGame int32 `json:"id_game"`
	IDUser int32 `json:"id_user"`
}

func (q *Queries) DeleteUserPlaysGame(ctx context.Context, arg DeleteUserPlaysGameParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserPlaysGame, arg.IDGame, arg.IDUser)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, name, description, image, link 
FROM game
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id int32) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Link,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const getUserPlaysGame = `-- name: GetUserPlaysGame :one
SELECT id_game, id_user, state, rating
FROM plays
WHERE id_game = $1 AND id_user = $2
`

type GetUserPlaysGameParams struct {
	IDGame int32 `json:"id_game"`
	IDUser int32 `json:"id_user"`
}

func (q *Queries) GetUserPlaysGame(ctx context.Context, arg GetUserPlaysGameParams) (Play, error) {
	row := q.db.QueryRowContext(ctx, getUserPlaysGame, arg.IDGame, arg.IDUser)
	var i Play
	err := row.Scan(
		&i.IDGame,
		&i.IDUser,
		&i.State,
		&i.Rating,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, name, description, image, link
FROM game
ORDER BY name
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserPlaysGames = `-- name: ListUserPlaysGames :many
SELECT id_game, id_user, state, rating
FROM plays
ORDER BY id_game, id_user
`

func (q *Queries) ListUserPlaysGames(ctx context.Context) ([]Play, error) {
	rows, err := q.db.QueryContext(ctx, listUserPlaysGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Play
	for rows.Next() {
		var i Play
		if err := rows.Scan(
			&i.IDGame,
			&i.IDUser,
			&i.State,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, password
FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :exec
UPDATE game 
SET name = $2, description = $3, image = $4 ,  link = $5
WHERE id = $1
`

type UpdateGameParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Image       string `json:"image"`
	Link        string `json:"link"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) error {
	_, err := q.db.ExecContext(ctx, updateGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Link,
	)
	return err
}

const updateRating = `-- name: UpdateRating :exec
UPDATE plays 
SET rating = $3
WHERE id_game = $1 AND id_user = $2
`

type UpdateRatingParams struct {
	IDGame int32       `json:"id_game"`
	IDUser int32       `json:"id_user"`
	Rating interface{} `json:"rating"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.ExecContext(ctx, updateRating, arg.IDGame, arg.IDUser, arg.Rating)
	return err
}

const updateState = `-- name: UpdateState :exec
UPDATE plays
SET state = $3
WHERE id_game = $1 AND id_user = $2
`

type UpdateStateParams struct {
	IDGame int32       `json:"id_game"`
	IDUser int32       `json:"id_user"`
	State  interface{} `json:"state"`
}

func (q *Queries) UpdateState(ctx context.Context, arg UpdateStateParams) error {
	_, err := q.db.ExecContext(ctx, updateState, arg.IDGame, arg.IDUser, arg.State)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, password = $3
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Name, arg.Password)
	return err
}

const updateUserPlaysGame = `-- name: UpdateUserPlaysGame :exec
UPDATE plays
SET state = $3, rating = $4
WHERE id_game = $1 AND id_user = $2
`

type UpdateUserPlaysGameParams struct {
	IDGame int32       `json:"id_game"`
	IDUser int32       `json:"id_user"`
	State  interface{} `json:"state"`
	Rating interface{} `json:"rating"`
}

func (q *Queries) UpdateUserPlaysGame(ctx context.Context, arg UpdateUserPlaysGameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPlaysGame,
		arg.IDGame,
		arg.IDUser,
		arg.State,
		arg.Rating,
	)
	return err
}
